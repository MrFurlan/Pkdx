/*
 * Copyright (C) 2016 Dami√°n Adams
 */
package com.mianlabs.pkdx.ui.main;

import android.app.FragmentManager;
import android.content.Intent;
import android.database.Cursor;
import android.os.Bundle;
import android.support.v4.content.Loader;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;

import com.mianlabs.pkdx.R;
import com.mianlabs.pkdx.database.PokeCursorManager;
import com.mianlabs.pkdx.database.PokeDBContract;
import com.mianlabs.pkdx.ui.generations.PokeListFragment;
import com.mianlabs.pkdx.utilities.PokePicker;
import com.mianlabs.pkdx.utilities.PokeSharedPreferences;
import com.mianlabs.pkdx.utilities.typeface.TypefaceUtils;
import com.mianlabs.pkdx.widget.PokeWidget;

import java.util.ArrayList;
import java.util.Random;

/**
 * Launches PokeFragments with a random, "caught" Pokemon either
 * generated by itself, by a user-selected Pokemon from a PokeListFragment fragment,
 * or by the home-screen Widget.
 */
public class MainActivity extends AppCompatActivity implements PokeCursorManager.LoaderCall {
    private static final String TAG = "MainActivity.class";

    // Keys for sending data to the PokeFragment.
    public static final String MAIN_KEY = "MainActivity";
    public static final String PKMN_CAUGHT_KEY = "PKMN_CAUGHT";

    private final int LOADER_ID = new Random().nextInt();

    // Saves the state of the loader so it only executes code once across configuration changes.
    private static final String LOADER_STATE_KEY = "LOADER";
    private boolean mHasLoaderFinished;

    private int mCaughtPokemon;
    private boolean mHasPokemonBeenCaught;

    private PokeFragment mPokeFragment;
    private static final String TAG_POKE_FRAGMENT = "PKF";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mCaughtPokemon = PokePicker.catchRandomPokemon();

        Intent intent = getIntent();

        Bundle bundle = new Bundle();
        bundle.putInt(MAIN_KEY, mCaughtPokemon);

        // Intent should always be not null (unless called from constructor).
        // MainActivity can receive intents from PokeListFragment and the PokeWidget.
        if (intent != null) {
            // If Pokemon has been selected by the user (not caught).
            if (intent.hasExtra(PokeListFragment.POKE_LIST_FRAG_KEY)) {
                int selectedPokemon = intent.getIntExtra(PokeListFragment.POKE_LIST_FRAG_KEY, 1);
                bundle.putInt(MAIN_KEY, selectedPokemon);
            } else {
                mHasPokemonBeenCaught = true; // If displaying "caught" Pokemon.
                bundle.putBoolean(PKMN_CAUGHT_KEY, true);

                if (intent.hasExtra(PokeWidget.POKE_WIDGET_KEY)) { // If Pokemon has been sent by the Widget.
                    mCaughtPokemon = intent.getIntExtra(PokeWidget.POKE_WIDGET_KEY, 1);
                    bundle.putInt(MAIN_KEY, mCaughtPokemon);
                }
            }
        }

        if (mHasPokemonBeenCaught) {
            // Initiates a loader for storing caught Pokemon in the db.
            PokeCursorManager pokeCursorManager = new PokeCursorManager(this, this,
                    PokeDBContract.CaughtPokemonEntry.TABLE_NAME);
            getSupportLoaderManager().initLoader(LOADER_ID, new Bundle(), pokeCursorManager);
        }

        if (savedInstanceState != null)
            mHasLoaderFinished = savedInstanceState.getBoolean(LOADER_STATE_KEY, false);

        startPokeFragment(bundle);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Sets the typeface of the activity for the retained fragment.
        TypefaceUtils.setActionBarTitle(this, getString(R.string.app_name));
        return super.onCreateOptionsMenu(menu);
    }

    /**
     * Launches the PokeFragment.
     */
    private void startPokeFragment(Bundle bundle) {
        // The PokeFragment class is retained across configuration changes to avoid
        // background thread leakage.
        FragmentManager fragmentManager = getFragmentManager();
        mPokeFragment = (PokeFragment) fragmentManager.findFragmentByTag(TAG_POKE_FRAGMENT);

        if (mPokeFragment == null) { // PokeFragment was not retained on configuration change.
            mPokeFragment = new PokeFragment();
            mPokeFragment.setArguments(bundle);
            getFragmentManager().beginTransaction()
                    .add(R.id.main_container, mPokeFragment, TAG_POKE_FRAGMENT).commit();
        }
    }

    @Override
    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {
        Log.d(TAG, "In onLoadFinished");
        // Prevents an infinite loop from happening because of DB Content Notifiers being
        // called after the data is inserted.
        if (!mHasLoaderFinished) {
            storeCaughtPokemon(cursor);
            mHasLoaderFinished = true;
        }
    }

    /**
     * Stores the caught Pokemon in the database.
     */
    private void storeCaughtPokemon(Cursor cursor) {
        ArrayList<Integer> listOfCaughtPokemon = PokeCursorManager.getPokemonInDb(cursor,
                PokeDBContract.CaughtPokemonEntry.TABLE_NAME,
                PokeDBContract.CaughtPokemonEntry.COLUMN_NUMBER);

        int countOfCaughtPokemon = listOfCaughtPokemon.size(); // Keeps the count of caught Pokemon.

        // Add the caught Pokemon to the db.
        if (!listOfCaughtPokemon.contains(mCaughtPokemon)) {
            PokeCursorManager.insertPokemonInDb(this, mCaughtPokemon,
                    PokeDBContract.CaughtPokemonEntry.TABLE_NAME,
                    PokeDBContract.CaughtPokemonEntry.COLUMN_NUMBER);
            countOfCaughtPokemon++;
            Log.d(TAG, "Pokemon has been caught.");
        }
        // Stores the count in a file.
        getSharedPreferences(PokeSharedPreferences.COUNT_CAUGHT_POKEMON_FILENAME, MODE_PRIVATE)
                .edit().putInt(PokeSharedPreferences.COUNT_CAUGHT_POKEMON_KEY, countOfCaughtPokemon).apply();
    }

    @Override
    protected void onPause() {
        // Destroys the loader once the user leaves the Activity
        // since our loader is for a one-time use only.
        getSupportLoaderManager().destroyLoader(LOADER_ID);
        Log.d(TAG, "Loader destroyed");
        super.onPause();
    }

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        // To prevent storing another Pokemon when the configuration changes.
        outState.putBoolean(LOADER_STATE_KEY, mHasLoaderFinished);
    }
}
